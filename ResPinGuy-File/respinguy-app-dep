#!/bin/bash
#######################################################################
# Root
allow_only_root()
{
  if [ "0$UID" -ne 0 ]; then
     echo "Merci d'être en root pour lancer L'installation"; exit 1
  fi
}
allow_only_root
#######################################################################
#_________________________________________________
# Vérifier l'outils git
if [ ! $(type -p git) ]; then
	clear
   echo "Impossible de trouver la commande : git"
   echo "Vous pouvez envisager d'installer le package contenant la commande."
	exit 1
fi
#_________________________________________________
# Vérifier l'outils wget
if [ ! $(type -p wget) ]; then
	clear
   echo "Impossible de trouver la commande : wget"
   echo "Vous pouvez envisager d'installer le package contenant la commande."
	exit 1
fi
#_________________________________________________
# Vérifier l'outils sudo
if [ ! $(type -p sudo) ]; then
	clear
   echo "Impossible de trouver la commande : sudo"
   echo "Vous pouvez envisager d'installer le package contenant la commande."
	exit 1
fi
#_________________________________________________
# Vérifier l'outils bash
if [ ! $(type -p bash) ]; then
	clear
   echo "Impossible de trouver la commande : bash"
   echo "Vous pouvez envisager d'installer le package contenant la commande."
	exit 1
fi
#_________________________________________________
# Vérifier l'outils sh
if [ ! $(type -p sh) ]; then
	clear
   echo "Impossible de trouver la commande : sh"
   echo "Vous pouvez envisager d'installer le package contenant la commande."
	exit 1
fi
#_________________________________________________
# Vérifier l'outils nano
if [ ! $(type -p nano) ]; then
	clear
   echo "Impossible de trouver la commande : nano"
   echo "Vous pouvez envisager d'installer le package contenant la commande."
	exit 1
fi
#_________________________________________________
# Vérifier l'outils de uname
if [ ! $(type -p uname) ]; then
	clear
   echo "Impossible de trouver la commande : uname"
   echo "Vous pouvez envisager d'installer le package contenant la commande."
	exit 1
fi
#_________________________________________________
# Vérifier les mksquashfs avec compression xz
if [ "$(mksquashfs 2>&1 | grep "Xdict-size")" = "" ]; then
   clear
   echo "Impossible de trouver la commande  : mksquashfs | Ou ne prend pas en charge -comp xz."
   echo "Vous pouvez envisager d'installer le package contenant la commande."
   exit 1
fi
#_________________________________________________
# Vérifier l'outils de création de l'image ISO
#KERNEL=$(uname -r)
#if [ ! -d "/lib/modules/$KERNEL/kernel/fs/squashfs/" ];then
#	clear
#   echo "Impossible de trouver les modules : squashfs"
#   echo "Vous pouvez envisager d'installer un autre noyaux ou de le recompiler"
#   echo "Si vous etes sur Ubuntu nous vous recommandons le noyaux Liquorix (https://liquorix.net)"
#	exit 1
#fi
#_________________________________________________
# Vérifier l'outils dracut
if [ ! $(type -p dracut) ]; then
	clear
   echo "Impossible de trouver la commande : dracut"
   echo "Vous pouvez envisager d'installer le package contenant la commande."
	exit 1
fi
#_________________________________________________
# Vérifier l'outils de création de l'image ISO
if [ ! $(type -p xorriso) ]; then
	clear
   echo "Impossible de trouver la commande : xorriso"
   echo "Vous pouvez envisager d'installer le package contenant la commande."
	exit 1
fi
#######################################################################
clear
echo "Tous les dépendances sont bien installer sur votre système"
exit
#_________________________________________________
# Vérifier l'outils de ...
#if [ ! $(type -p ...) ]; then
#	clear
#   echo "Impossible de trouver la commande : ..."
#   echo "Vous pouvez envisager d'installer le package contenant la commande."
#	exit 1
#fi